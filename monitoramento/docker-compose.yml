version: '3.7'

services:
  prometheus: #Serviço de monitoramento de código aberto para métricas e alertas
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - monitor-net #cai ele restarta automáticamente
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1g
        reservations:
          cpus: '0.5'
          memory: 512m
    healthcheck:
      test: ["CMD-SHELL", "wget --spider http://localhost:9090 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  node-exporter: # coletar / capturar uma grande quantidade de dados do sistema operacional Linux e do Kernel da máquina onde está instalado.
    image: prom/node-exporter:latest
    ports:
      - "9100:9100"
    command:
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/host:ro
    networks:
      - monitor-net
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256m
        reservations:
          cpus: '0.25'
          memory: 128m
    healthcheck:
      test: ["CMD-SHELL", "wget --spider http://localhost:9100 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  cadvisor: #(abreviação de contêiner Advisor) analisa e expõe o uso de resursos e dados de desempenho de contêineres e execução
    image: gcr.io/cadvisor/cadvisor:latest
    ports:
      - "8081:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - monitor-net
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512m
        reservations:
          cpus: '0.5'
          memory: 256m
    healthcheck:
      test: ["CMD-SHELL", "wget --spider http://localhost:8081 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  grafana: #plataforma de visualização e analise de métricas por meio de gráficos
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - monitor-net
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1g
        reservations:
          cpus: '0.5'
          memory: 512m
    healthcheck:
      test: ["CMD-SHELL", "wget --spider http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  monitor-net:
    driver: bridge

volumes:
  grafana-data:
